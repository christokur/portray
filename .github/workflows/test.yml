name: Test

on:
  # Runs on pushes targeting the default branch
  push:
    branches:
      - "*"
  pull_request:
    types: [opened, synchronize, reopened]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  id-token: write # This is required for requesting the JWT
  contents: read  # This is required for actions/checkout
  pages: write      # to deploy to Pages

# Allow one concurrent deployment
concurrency:
  group: "test"
  cancel-in-progress: true

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        python-version: [3.12]
        os: [ubuntu-latest, macos-latest, windows-latest]

    steps:
      - uses: actions/checkout@v4
#      - name: Ubuntu cache
#        uses: actions/cache@v1
#        if: startsWith(matrix.os, 'ubuntu')
#        with:
#          path: ~/.cache/pip
#          key:
#            ${{ matrix.os }}-${{ matrix.python-version }}-${{ hashFiles('**/pyproject.toml') }}
#          restore-keys: |
#            ${{ matrix.os }}-${{ matrix.python-version }}-

#      - name: macOS cache
#        uses: actions/cache@v1
#        if: startsWith(matrix.os, 'macOS')
#        with:
#          path: ~/Library/Caches/pip
#          key:
#            ${{ matrix.os }}-${{ matrix.python-version }}-${{ hashFiles('**/pyproject.toml') }}
#          restore-keys: |
#            ${{ matrix.os }}-${{ matrix.python-version }}-
#
#      - name: Windows cache
#        uses: actions/cache@v1
#        if: startsWith(matrix.os, 'windows')
#        with:
#          path: c:\users\runneradmin\appdata\local\pip\cache
#          key:
#            ${{ matrix.os }}-${{ matrix.python-version }}-${{ hashFiles('**/pyproject.toml') }}
#          restore-keys: |
#            ${{ matrix.os }}-${{ matrix.python-version }}-

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade poetry==1.8.5
          poetry check --lock
          poetry install --with main,test --no-ansi --no-interaction || {
            poetry install --with main,test --no-ansi --no-interaction;
          }

      - name: Test
        shell: bash
        run: |
          #poetry run pytest tests/ -s --cov=portray/ --cov-report=term-missing ${@-}
          bash ./scripts/test.sh
          poetry run coverage xml || true
          
          poetry run poe test-cov

#      - name: Report Coverage
#        if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.12'
#        uses: codecov/codecov-action@v1.0.6
